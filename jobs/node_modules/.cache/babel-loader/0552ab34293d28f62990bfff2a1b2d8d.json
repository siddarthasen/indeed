{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\supah\\\\Desktop\\\\wizehire\\\\jobs\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport data from './resume.csv';\nimport { csv } from 'd3';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [filteredData, setFilteredData] = useState([]);\n  const [job, setJob] = useState('');\n  const [location, setLocation] = useState('');\n  const [display, setDisplay] = useState('');\n  /**\r\n    Initialize CSV\r\n  */\n\n  useEffect(() => {\n    csv(data).then(data => {\n      setFilteredData(data);\n    });\n  }, []);\n  /**\r\n    Filter results and send to API\r\n  */\n\n  var submit = e => {\n    setDisplay(''); // filter by job first\n\n    let temp = filteredData.filter(each => each.Job === job);\n\n    if (temp.length === 0) {\n      setDisplay(\"No jobs found\");\n      return;\n    }\n\n    temp = temp.filter(each => each.Location === location);\n\n    if (temp.length === 0) {\n      setDisplay(\"No Location found\");\n      return;\n    }\n\n    setDisplay(''); // send {job, location} to API\n\n    axios.post('/api', {\n      job: job,\n      location: location\n    }).then(res => {\n      console.log(res.data);\n      difficulty(parseInt(temp[0].Resume), parseInt(res.data.total));\n    });\n  };\n  /**\r\n    Calculates RESUMES divided by JOBS\r\n    Sets DISPLAY to \"Easy\", \"Medium\", \"Hard\"\r\n  */\n\n\n  const difficulty = (resumes, jobs) => {\n    let num = resumes / jobs;\n\n    if (num <= 1) {\n      setDisplay('Hard');\n    } else if (num <= 2) {\n      setDisplay('Medium');\n    } else {\n      setDisplay('Easy');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"job\",\n      children: \"Job:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"job\",\n      onChange: e => setJob(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"loc\",\n      children: \"Location:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"loc\",\n      name: \"loc\",\n      onChange: e => setLocation(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: submit,\n      children: \"Click Me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: display\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"VqdYwjCtPUWZvlQ9X6u+Uxp1ivI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/supah/Desktop/wizehire/jobs/src/App.js"],"names":["data","csv","React","useEffect","useState","axios","App","filteredData","setFilteredData","job","setJob","location","setLocation","display","setDisplay","then","submit","e","temp","filter","each","Job","length","Location","post","res","console","log","difficulty","parseInt","Resume","total","resumes","jobs","num","target","value"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport data from './resume.csv';\r\nimport { csv } from 'd3';\r\nimport React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [job, setJob] = useState('');\r\n  const [location, setLocation] = useState('');\r\n  const [display, setDisplay] = useState('');\r\n  \r\n  /**\r\n    Initialize CSV\r\n  */\r\n  useEffect(() => {\r\n    csv(data).then(data => {\r\n      setFilteredData(data)\r\n    })\r\n  }, [])\r\n\r\n  /**\r\n    Filter results and send to API\r\n  */\r\n  var submit = (e) => {\r\n    setDisplay('')\r\n    // filter by job first\r\n    let temp = filteredData.filter(each => each.Job === job);\r\n    if (temp.length === 0) {\r\n      setDisplay(\"No jobs found\");\r\n      return;\r\n    }\r\n\r\n    temp = temp.filter(each => each.Location === location);\r\n    if (temp.length === 0) {\r\n      setDisplay(\"No Location found\");\r\n      return;\r\n    }\r\n    setDisplay('')\r\n    // send {job, location} to API\r\n    \r\n    axios.post('/api', {job: job, location: location})\r\n      .then(res => {\r\n        console.log(res.data);\r\n        difficulty(parseInt(temp[0].Resume), parseInt(res.data.total))\r\n      })      \r\n  }\r\n  /**\r\n    Calculates RESUMES divided by JOBS\r\n    Sets DISPLAY to \"Easy\", \"Medium\", \"Hard\"\r\n  */\r\n  const difficulty = (resumes, jobs) => {\r\n    let num = resumes / jobs;\r\n    if (num <= 1) {\r\n      setDisplay('Hard')\r\n    } else if (num <= 2) {\r\n      setDisplay('Medium')\r\n    } else {\r\n      setDisplay('Easy')\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div >\r\n        <label for=\"job\">Job:</label>\r\n        <input type=\"text\" id=\"job\" onChange={(e) => setJob(e.target.value)} ></input>\r\n        <label for=\"loc\">Location:</label>\r\n        <input type=\"text\" id=\"loc\" name=\"loc\" onChange={(e) => setLocation(e.target.value)}></input>\r\n        <button type=\"button\" onClick={submit}>Click Me!</button>\r\n\r\n        <h3>{display}</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}